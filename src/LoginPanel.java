
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Simon
 */
public class LoginPanel extends javax.swing.JFrame {

    public static SudokuPanel sp;
    private UserData userdata = new UserData();
    private static User currentUser = new User("", "", "", "", 0, 0, "00:00:00");

    /**
     * 
     * Login Panel
     * 
     */
    public LoginPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void initComponents() {

        nickNameLabel = new javax.swing.JLabel();
        nicknameField = new javax.swing.JTextField();
        loginButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Exit = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        about = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImages(null);
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(480, 227));
        setName("nameInputFrame"); // NOI18N
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(480, 227));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nickNameLabel.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        nickNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nickNameLabel.setText("Nickname:");
        getContentPane().add(nickNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 110, 20));

        nicknameField.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        nicknameField.setToolTipText("");
        nicknameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nicknameFieldKeyPressed(evt);
            }
        });
        getContentPane().add(nicknameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 120, 20));

        loginButton.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        loginButton.setText("Play");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        getContentPane().add(loginButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 100, -1));

        errorLabel.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(204, 0, 51));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLabel.setText("No \" ; \" or \" , \" allowed!");
        errorLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(errorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 140, 20));
        errorLabel.getAccessibleContext().setAccessibleDescription("\"\"");
        errorLabel.setVisible(false);

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/unibzbackground.png"))); // NOI18N
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 480, 206));

        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jMenuBar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuBar1MousePressed(evt);
            }
        });
        jMenuBar1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jMenuBar1MouseDragged(evt);
            }
        });

        Exit.setText("Exit");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/exitButton.png"))); // NOI18N
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Exit.add(jMenuItem1);

        jMenuBar1.add(Exit);

        about.setText("About");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/aboutButton.png"))); // NOI18N
        jMenuItem2.setText("About Me");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        about.add(jMenuItem2);

        jMenuBar1.add(about);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    int posX = 0, posY = 0;
    private void jMenuBar1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MouseDragged
        setLocation(evt.getXOnScreen() - posX, evt.getYOnScreen() - posY);
    }//GEN-LAST:event_jMenuBar1MouseDragged

    private void jMenuBar1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuBar1MousePressed
        posX = evt.getX();
        posY = evt.getY();
    }//GEN-LAST:event_jMenuBar1MousePressed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed

        if (passwordChecker() == true) {
            sp = new SudokuPanel(userdata, currentUser);
            sp.setLocationRelativeTo(this);
            sp.setVisible(true);
            sp.playerNameLabel.setText(currentUser.getNickname());

            dispose();
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    private void nicknameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicknameFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (passwordChecker() == true) {
                sp = new SudokuPanel(userdata, currentUser);
                sp.setLocationRelativeTo(this);
                sp.setVisible(true);
                sp.playerNameLabel.setText(currentUser.getNickname());

                dispose();
            }
        }
    }//GEN-LAST:event_nicknameFieldKeyPressed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JOptionPane.showMessageDialog(this, new About().getAboutInformation(), "Name:  " + "Simon Meier", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new LoginPanel().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Exit;
    private javax.swing.JMenu about;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel errorLabel;
    public javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel nickNameLabel;
    public javax.swing.JTextField nicknameField;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @return checks whether User exists: if not, creates another User
     */
    public boolean passwordChecker() {

        ArrayList<User> userList = this.userdata.getUserList();
        ArrayList<String> tempNick = new ArrayList<>();

        for (User uN : userList) {
            tempNick.add(uN.getNickname());
        }
        if (nicknameField.getText().contains(",") || nicknameField.getText().contains(";")) {
            errorLabel.setVisible(true);
            JOptionPane.showMessageDialog(this, "Unfortunately no \",\" 's or \";\" 's allowed!", "Error Message", JOptionPane.ERROR_MESSAGE);
            nicknameField.revalidate();
            nicknameField.selectAll();
            nicknameField.requestFocus();
        } else if (nicknameField.getText().length() == 0 || nicknameField.getText().length() > 13){
            JOptionPane.showMessageDialog(this, "Please choose a Nickname, which has between 1 and 13 letters!", "Error Message", JOptionPane.ERROR_MESSAGE);
            nicknameField.revalidate();
            nicknameField.selectAll();
            nicknameField.requestFocus();
        } else if (!userList.isEmpty()) {

            if (tempNick.contains(this.nicknameField.getText())) {
                int question = JOptionPane.showConfirmDialog(this, "Want to play as \" " + this.nicknameField.getText() + " \"?", "", JOptionPane.YES_OPTION);
                if (question == 0) {
                    currentUser.setIndexOfUser(tempNick.indexOf(this.nicknameField.getText()));
                    currentUser.setNickname(userList.get(currentUser.getIndexOfUser()).getNickname());
                    this.userdata.setNewSudokusIndex(userList.get(currentUser.getIndexOfUser()).getNewGames().split(","));
                    this.userdata.setSolvedSudokusIndex(userList.get(currentUser.getIndexOfUser()).getGamesSolved().split(","));
                    this.userdata.setTriedSudokusIndex(userList.get(currentUser.getIndexOfUser()).getGamesTriedNotSolved().split(",")); //hier geändert
                    this.userdata.setNickName(userList.get(currentUser.getIndexOfUser()).getNickname());
                    this.userdata.setNumberOfGamesSolved(userList.get(currentUser.getIndexOfUser()).getNumberOfGamesSolved());
                    this.userdata.setNumberOfGamesTriedNotSolved(userList.get(currentUser.getIndexOfUser()).getNumberOfGamesTriedNotSolved());
                    this.userdata.setAvgTime(userList.get(currentUser.getIndexOfUser()).getAvgTime());

                    setUserdata(userdata);
                    return true;
                } else {
                    return false;
                }
            } else if (!tempNick.contains(this.nicknameField.getText())) {
                createNewUser();
                return true;
            }
        } else {
            createNewUser();
            return true;
        }
        return false;
    }

    /**
     *
     * creates new User, if no User is in the List
     *
     */
    public void createNewUser() {

        ArrayList<Sudoku> getaBunchOfNewSudokus = new SudokuReader().getSudokus();
        String newSudokus = "";

        for (int i = 0; i < getaBunchOfNewSudokus.size(); i++) {
            newSudokus += "," + getaBunchOfNewSudokus.get(i).getGameNumber();
        }

        currentUser.setNewGames(newSudokus);
        currentUser.setNickname(this.nicknameField.getText());
        currentUser.setGamesSolved("");
        currentUser.setGamesTriedNotSolved("");
        currentUser.setNumberOfGamesSolved(0);
        currentUser.setNumberOfGamesTriedNotSolved(0);
        currentUser.setAvgTime("00:00:00");

        User newUser = new User(this.nicknameField.getText(), currentUser.getNewGames(), currentUser.getGamesSolved(), currentUser.getGamesTriedNotSolved(), currentUser.getNumberOfGamesSolved(), currentUser.getNumberOfGamesTriedNotSolved(), currentUser.getAvgTime());
        ArrayList<User> userList = this.userdata.getUserList();
        userList.add(newUser);
        userdata.saveFile();

        currentUser.setIndexOfUser(userdata.getUserList().size() - 1);
        currentUser.setNickname(userdata.getUserList().get(currentUser.getIndexOfUser()).getNickname());
        this.userdata.setNewSudokusIndex(userList.get(currentUser.getIndexOfUser()).getNewGames().split(","));
        this.userdata.setSolvedSudokusIndex(userList.get(currentUser.getIndexOfUser()).getGamesSolved().split(","));
        this.userdata.setTriedSudokusIndex(userList.get(currentUser.getIndexOfUser()).getGamesTriedNotSolved().split(","));
        this.userdata.setNickName(userList.get(currentUser.getIndexOfUser()).getNickname());
        this.userdata.setNumberOfGamesSolved(userList.get(currentUser.getIndexOfUser()).getNumberOfGamesSolved());
        this.userdata.setNumberOfGamesTriedNotSolved(userList.get(currentUser.getIndexOfUser()).getNumberOfGamesTriedNotSolved());
        this.userdata.setAvgTime(userList.get(currentUser.getIndexOfUser()).getAvgTime());

        setUserdata(userdata);

    }

    public void setUserdata(UserData userdata) {
        this.userdata = userdata;
    }

    public UserData getUserdata() {
        return userdata;
    }

    public static User getCurrentUser() {
        return currentUser;
    }

    public static void setCurrentUser(User currentUser) {
        LoginPanel.currentUser = currentUser;
    }
}
