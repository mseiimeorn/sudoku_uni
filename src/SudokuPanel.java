
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.*;



/*
*
* more or less this class communicates between all other classes and builds the GUI
*
 */
/**
 *
 * @author Simon
 */
public class SudokuPanel extends javax.swing.JFrame {

    private final byte SIZE = 4;
    private static int min, sec, hsec, hsecCalculator;
    private Timer t;
    private JPanel[] cellPanel;
    private JTextField[] cells;
    private JTextField[] notice;
    private ArrayList<String> cellsAfterUserInput = new ArrayList<>();
    private ArrayList<Integer> cellsBeforeUserInput;
    private SudokuChecker sudokuChecker;
    private SudokuReader sr;
    private int indexOfSudoku;
    private UserData userdata;
    private User currentUser;
    private DataSave datasave;
    private ArrayList<String> newSudokus;
    private ArrayList<String> solvedSudokus;
    private ArrayList<String> triedSudokus;
    private String[] comboBox;
    private String selectedItem;
    //private String pressed;

    /**
     * Creates new form SudokuPanel
     *
     * @param userdata
     * @param currentUser
     */
    public SudokuPanel(UserData userdata, User currentUser) {
        this.sr = new SudokuReader();
        this.currentUser = currentUser;
        this.userdata = userdata;
        this.userdata.getUserList();
        this.newSudokus = userdata.getNewSudokusIndex();
        this.solvedSudokus = userdata.getSolvedSudokusIndex();
        this.triedSudokus = userdata.getTriedSudokusIndex();
        
        t = new Timer(10, new StopWatch());
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void initComponents() {

        sudokuPanel = new javax.swing.JPanel();
        sudokuGrid = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        menuPanel = new javax.swing.JPanel();
        playerNameLabel = new javax.swing.JLabel();
        playButton = new javax.swing.JButton();
        timeLabel = new javax.swing.JLabel();
        sudokuSelectionBox = new javax.swing.JComboBox<>();
        resetButton = new javax.swing.JButton();
        chooseGameLabel = new javax.swing.JLabel();
        gameNumberLabel = new javax.swing.JLabel();
        backToLoginLabel = new javax.swing.JLabel();
        infoButton = new javax.swing.JLabel();
        solutionLabel = new javax.swing.JLabel();
        helpInfoButton = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        ExitMenu = new javax.swing.JMenu();
        Exit = new javax.swing.JMenuItem();
        AboutMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        sudokuPanel.setAlignmentX(0.0F);
        sudokuPanel.setAlignmentY(0.0F);
        sudokuPanel.setPreferredSize(new java.awt.Dimension(600, 480));
        sudokuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sudokuGrid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        sudokuGrid.setAlignmentX(0.0F);
        sudokuGrid.setAlignmentY(0.0F);
        sudokuGrid.setPreferredSize(new java.awt.Dimension(444, 444));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/picSudokuBackground.png"))); // NOI18N

        javax.swing.GroupLayout sudokuGridLayout = new javax.swing.GroupLayout(sudokuGrid);
        sudokuGrid.setLayout(sudokuGridLayout);
        sudokuGridLayout.setHorizontalGroup(
            sudokuGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sudokuGridLayout.setVerticalGroup(
            sudokuGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        sudokuPanel.add(sudokuGrid, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        menuPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        menuPanel.setAlignmentX(0.0F);
        menuPanel.setAlignmentY(0.0F);
        menuPanel.setMinimumSize(new java.awt.Dimension(120, 480));
        menuPanel.setPreferredSize(new java.awt.Dimension(140, 440));
        menuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        playerNameLabel.setFont(new java.awt.Font("Calibri Light", 1, 16)); // NOI18N
        playerNameLabel.setForeground(new java.awt.Color(240, 240, 240));
        playerNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerNameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        playerNameLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playerNameLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                playerNameLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                playerNameLabelMouseExited(evt);
            }
        });
        menuPanel.add(playerNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 120, 30));

        playButton.setFont(new java.awt.Font("Calibri Light", 1, 13)); // NOI18N
        playButton.setText("PLAY");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        menuPanel.add(playButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 120, 30));

        timeLabel.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(240, 240, 240));
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setText("00:00:00");
        menuPanel.add(timeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 120, 30));

        sudokuSelectionBox.setFont(new java.awt.Font("Calibri Light", 1, 13)); // NOI18N
        sudokuSelectionBox.setModel(new javax.swing.DefaultComboBoxModel<>(checkComboBoxInput_newGame(newSudokus, solvedSudokus, triedSudokus)));
        // getCheckComboBoxInput()
        menuPanel.add(sudokuSelectionBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 114, 28));

        resetButton.setFont(new java.awt.Font("Calibri Light", 1, 13)); // NOI18N
        resetButton.setText("DISCARD");
        resetButton.setEnabled(false);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        menuPanel.add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 120, 30));

        chooseGameLabel.setFont(new java.awt.Font("Calibri Light", 1, 13)); // NOI18N
        chooseGameLabel.setForeground(new java.awt.Color(240, 240, 240));
        chooseGameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chooseGameLabel.setText("Choose Game:");
        menuPanel.add(chooseGameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 120, 30));

        gameNumberLabel.setFont(new java.awt.Font("Calibri Light", 1, 14)); // NOI18N
        gameNumberLabel.setForeground(new java.awt.Color(240, 240, 240));
        gameNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gameNumberLabel.setText("  ");
        menuPanel.add(gameNumberLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 120, 30));

        backToLoginLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backToLoginLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/backToLogin.png"))); // NOI18N
        backToLoginLabel.setAlignmentY(0.0F);
        backToLoginLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backToLoginLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backToLoginLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backToLoginLabelMouseExited(evt);
            }
        });
        menuPanel.add(backToLoginLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, 32, 28));

        infoButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/infoButton.png"))); // NOI18N
        infoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                infoButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                infoButtonMouseExited(evt);
            }
        });
        menuPanel.add(infoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, 32, 28));

        solutionLabel.setFont(new java.awt.Font("Calibri Light", 1, 13)); // NOI18N
        solutionLabel.setForeground(new java.awt.Color(240, 240, 240));
        solutionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        solutionLabel.setVisible(false);
        solutionLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                solutionLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                solutionLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                solutionLabelMouseExited(evt);
            }
        });
        menuPanel.add(solutionLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 124, 120, 30));

        helpInfoButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        helpInfoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/helpButton.png"))); // NOI18N
        helpInfoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpInfoButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                helpInfoButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                helpInfoButtonMouseExited(evt);
            }
        });
        menuPanel.add(helpInfoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 32, 28));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/menuBackground.png"))); // NOI18N
        menuPanel.add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 1, 174, 442));

        sudokuPanel.add(menuPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(444, 0, 176, 444));

        menuBar.setPreferredSize(new java.awt.Dimension(600, 21));
        menuBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuBarMousePressed(evt);
            }
        });
        menuBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                menuBarMouseDragged(evt);
            }
        });

        ExitMenu.setText("Exit");
        ExitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuActionPerformed(evt);
            }
        });

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/exitButton.png"))); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        ExitMenu.add(Exit);

        menuBar.add(ExitMenu);

        AboutMenu.setText("About");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/aboutButton.png"))); // NOI18N
        jMenuItem1.setText("About Me");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        AboutMenu.add(jMenuItem1);

        menuBar.add(AboutMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sudokuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sudokuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void ExitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuActionPerformed

    }//GEN-LAST:event_ExitMenuActionPerformed
    int posX, posY;
    private void menuBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuBarMousePressed
        posX = evt.getX();
        posY = evt.getY();
    }//GEN-LAST:event_menuBarMousePressed

    private void menuBarMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuBarMouseDragged
        setLocation(evt.getXOnScreen() - posX, evt.getYOnScreen() - posY);
    }//GEN-LAST:event_menuBarMouseDragged
    //reset Button
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        for (int i = 0; i < cells.length; i++) {
            if (cells[i].isEditable() == true) {
                cells[i].setText("");
            }
        }
    }//GEN-LAST:event_resetButtonActionPerformed
    //set properties for the Play Button
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed

        if (playButton.getText().equals("PLAY")) {

            sudokuSelectionBox.setModel(new javax.swing.DefaultComboBoxModel<>(getCheckComboBoxInput()));
            min = 0;
            sec = 0;
            hsec = 0;
            hsecCalculator = 0;
            resetButton.setEnabled(true);
            cellsAfterUserInput.clear();
            sudokuGrid.removeAll();
            sudokuGrid.revalidate();
            sudokuGrid.repaint();

            selectedItem = (String) sudokuSelectionBox.getSelectedItem();

            gameSelector(newSudokus, solvedSudokus, triedSudokus);

            if (sudokuGrid.getComponentCount() == 0) {
                addTextFields(sr.getSudokus().get(indexOfSudoku));
            }

            gameNumberLabel.setText("Game:  " + sr.getSudokus().get(indexOfSudoku).getGameNumber());

            playButton.setEnabled(false);
            playButton.addMouseListener(new PlayButtonEnabler());

            t.start();
            playButton.setText("CHECK IT");

        } else if (playButton.getText().equals("CHECK IT")) {
            t.stop();
            playButton.setText("PLAY");
            resetButton.setEnabled(false);
            for (int i = 0; i < cells.length; i++) {
                cellsAfterUserInput.add(cells[i].getText());
            }

            sudokuChecker = new SudokuChecker(cellsAfterUserInput, cellsBeforeUserInput);
            if (sudokuChecker.isCompare() == true) {
                solutionLabel.setVisible(true);
                solutionLabel.setText("Correct!");
            } else if (sudokuChecker.isCompare() == false) {
                solutionLabel.setVisible(true);
                solutionLabel.setText("Wrong!");
            }

            datasave = new DataSave(userdata, sudokuChecker, currentUser.getIndexOfUser(), hsecCalculator, sr.getSudokus().get(indexOfSudoku));

            userdata.getUserList().set(currentUser.getIndexOfUser(), new User(currentUser.getNickname(), datasave.getNewSudokus(), datasave.getSolvedSudokus(), datasave.getTriedSudokus(), datasave.getNumberOfSolvedGames(), datasave.getNumberOfTriedGames(), datasave.getUpdatedAvgTime()));
            userdata.saveFile();

            this.newSudokus = new ArrayList<String>(Arrays.asList(userdata.getUserList().get(currentUser.getIndexOfUser()).getNewGames().split(",")));

            this.solvedSudokus = new ArrayList<String>(Arrays.asList(userdata.getUserList().get(currentUser.getIndexOfUser()).getGamesSolved().split(",")));

            this.triedSudokus = new ArrayList<String>(Arrays.asList(userdata.getUserList().get(currentUser.getIndexOfUser()).getGamesTriedNotSolved().split(",")));

            checkComboBoxInput(this.newSudokus, this.solvedSudokus, this.triedSudokus);
            sudokuSelectionBox.revalidate();
            sudokuSelectionBox.setModel(new javax.swing.DefaultComboBoxModel<>(getCheckComboBoxInput()));
        }
    }//GEN-LAST:event_playButtonActionPerformed

    private void playerNameLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerNameLabelMouseClicked
        JOptionPane.showMessageDialog(this, new UserInformation(currentUser.getIndexOfUser()).getUserInformation(), "Nickname:  " + currentUser.getNickname(), JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_playerNameLabelMouseClicked

    private void playerNameLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerNameLabelMouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
        playerNameLabel.setToolTipText("click for more info");
    }//GEN-LAST:event_playerNameLabelMouseEntered

    private void playerNameLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playerNameLabelMouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_playerNameLabelMouseExited

    private void backToLoginLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToLoginLabelMouseClicked
        new LoginPanel().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backToLoginLabelMouseClicked

    private void backToLoginLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToLoginLabelMouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
        backToLoginLabel.setToolTipText("change user");
    }//GEN-LAST:event_backToLoginLabelMouseEntered

    private void backToLoginLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backToLoginLabelMouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_backToLoginLabelMouseExited

    private void infoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoButtonMouseClicked
        JOptionPane.showMessageDialog(this, new UserInformation(currentUser.getIndexOfUser()).getUserInformation(), "Nickname:  " + currentUser.getNickname(), JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_infoButtonMouseClicked

    private void solutionLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solutionLabelMouseClicked
        if (sudokuChecker.isCompare() == true || sudokuChecker.isCompare() == false) {
            
            JOptionPane.showMessageDialog(this, "Solution:\n\n" + sudokuChecker.getSolutionAsString(), "Nickname:  " + currentUser.getNickname(), JOptionPane.INFORMATION_MESSAGE);
        } else {
            
        }
    }//GEN-LAST:event_solutionLabelMouseClicked

    private void helpInfoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpInfoButtonMouseClicked
        if (sudokuSelectionBox.getSelectedItem().toString().equals("New")) {
            JOptionPane.showMessageDialog(this, "New Sudokus:\n\n" + getSudokusAsString(this.newSudokus), "Nickname:  " + currentUser.getNickname(), JOptionPane.INFORMATION_MESSAGE);
        } else if (sudokuSelectionBox.getSelectedItem().toString().equals("Solved")) {
            JOptionPane.showMessageDialog(this, "Solved Sudokus:\n\n" + getSudokusAsString(this.solvedSudokus), "Nickname:  " + currentUser.getNickname(), JOptionPane.INFORMATION_MESSAGE);
        } else if (sudokuSelectionBox.getSelectedItem().toString().equals("Tried")) {
            JOptionPane.showMessageDialog(this, "Tried Sudokus:\n\n" + getSudokusAsString(this.triedSudokus), "Nickname:  " + currentUser.getNickname(), JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_helpInfoButtonMouseClicked

    private void infoButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoButtonMouseEntered
        if (!solutionLabel.getText().equals("")) {
            setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }//GEN-LAST:event_infoButtonMouseEntered

    private void infoButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoButtonMouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_infoButtonMouseExited

    private void helpInfoButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpInfoButtonMouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_helpInfoButtonMouseEntered

    private void helpInfoButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpInfoButtonMouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_helpInfoButtonMouseExited

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JOptionPane.showMessageDialog(this, new About().getAboutInformation(), "Name:  " + "Simon Meier", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void solutionLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solutionLabelMouseEntered
        setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_solutionLabelMouseEntered

    private void solutionLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_solutionLabelMouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_solutionLabelMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SudokuPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AboutMenu;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu ExitMenu;
    private javax.swing.JLabel backToLoginLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel chooseGameLabel;
    private javax.swing.JLabel gameNumberLabel;
    private javax.swing.JLabel helpInfoButton;
    private javax.swing.JLabel infoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel menuPanel;
    public javax.swing.JButton playButton;
    public javax.swing.JLabel playerNameLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JLabel solutionLabel;
    private javax.swing.JPanel sudokuGrid;
    private javax.swing.JPanel sudokuPanel;
    private javax.swing.JComboBox<String> sudokuSelectionBox;
    public javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables

    /*
    *
    * Load the Sudoku Data into TextField and add TextField to the Panel SudokuPanel
    *
     */
    public void addTextFields(Sudoku sudoku) {
        indexOfSudoku = Integer.parseInt(sudoku.getGameNumber().replace("#", "")) - 1;
        this.sudokuGrid.setLayout(new GridBagLayout());
        GridBagConstraints g = new GridBagConstraints();

        JPanel[][] boxes = new JPanel[SIZE / 2][SIZE / 2];
        for (int x = 0; x < boxes.length; x++) {
            for (int y = 0; y < boxes[x].length; y++) {
                g.gridx = y;
                g.gridy = x;
                boxes[x][y] = new JPanel();
                this.sudokuGrid.add(boxes[x][y], g);
            }
        }

        cells = new JTextField[SIZE * SIZE];
        for (int i = 0; i < cells.length; i++) {
            cells[i] = new TextField();
            cells[i].setText(sudoku.getSudoku().get(i).toString());
            cells[i].setEditable(false);
            if (cells[i].getText().equals("0")) {
                cells[i].setFont(new Font("Calibri Light", Font.ITALIC + Font.BOLD, 50));
                cells[i].setText("");
                cells[i].setBackground(Color.WHITE);
                cells[i].setEditable(true);
            }
        }

        notice = new JTextField[SIZE * SIZE];
        for (int i = 0; i < notice.length; i++) {
            notice[i] = new NoticeTextField();
            notice[i].setEditable(false);
            if (cells[i].getText().isEmpty()) {
                notice[i].setEditable(true);
            }
        }

        cellPanel = new JPanel[SIZE * SIZE];
        for (int i = 0; i < cellPanel.length; i++) {
            cellPanel[i] = new JPanel();
            cellPanel[i].setLayout(new BoxLayout(cellPanel[i], BoxLayout.Y_AXIS));
            cellPanel[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
            if (cells[i].getText().isEmpty()) {
                cellPanel[i].add(notice[i]);
            }
            cellPanel[i].add(cells[i]);
        }

        int i = 0;
        for (int x = 0; x < boxes.length; x++) {
            for (int y = 0; y < boxes[x].length; y++) {
                boxes[x][y].setLayout(new GridLayout(2, 2));
                boxes[x][y].setBorder(BorderFactory.createLineBorder(Color.BLACK));
                boxes[x][y].add(cellPanel[i]);
                i++;
                boxes[x][y].add(cellPanel[i]);
                i++;
                boxes[x][y].add(cellPanel[i]);
                i++;
                boxes[x][y].add(cellPanel[i]);
                i++;
            }
        }

        cellsBeforeUserInput = sudoku.getSudoku();
    }

    /*
    *
    * Method for selecting a rondom Sudoku of "new", "tried" or "solved"
    *
     */
    public int gameSelector(ArrayList<String> newSudokus, ArrayList<String> solvedSudokus, ArrayList<String> triedSudokus) {
        if (sudokuSelectionBox.getSelectedItem().toString().equals("New")) {
            indexOfSudoku = Integer.parseInt(new SudokuSelector(newSudokus, solvedSudokus, triedSudokus).selectNewSudoku().getGameNumber().replace("#", "")) - 1;
        } else if (sudokuSelectionBox.getSelectedItem().toString().equals("Tried")) {
            indexOfSudoku = Integer.parseInt(new SudokuSelector(newSudokus, solvedSudokus, triedSudokus).selectTriedSudoku().getGameNumber().replace("#", "")) - 1;
        } else if (sudokuSelectionBox.getSelectedItem().toString().equals("Solved")) {
            indexOfSudoku = Integer.parseInt(new SudokuSelector(newSudokus, solvedSudokus, triedSudokus).selectSolvedSudoku().getGameNumber().replace("#", "")) - 1;
        }
        return indexOfSudoku;
    }

    //set properties for the first comboxItems
    public String[] checkComboBoxInput_newGame(ArrayList<String> newGames, ArrayList<String> solvedGames, ArrayList<String> triedGames) {

        if ((!newGames.isEmpty() && !solvedGames.isEmpty() && !triedGames.isEmpty())) {
            this.comboBox = new String[]{"New", "Solved", "Tried"};
        } else if ((!newGames.isEmpty() && !solvedGames.isEmpty() && triedGames.isEmpty())) {
            this.comboBox = new String[]{"New", "Solved"};
        } else if ((!newGames.isEmpty() && solvedGames.isEmpty() && !triedGames.isEmpty())) {
            this.comboBox = new String[]{"New", "Tried"};
        } else if ((newGames.isEmpty() && !solvedGames.isEmpty() && !triedGames.isEmpty())) {
            this.comboBox = new String[]{"Solved", "Tried"};
        } else if ((!newGames.isEmpty() && solvedGames.isEmpty() && triedGames.isEmpty())) {
            this.comboBox = new String[]{"New"};
        } else if ((newGames.isEmpty() && !solvedGames.isEmpty() && triedGames.isEmpty())) {
            this.comboBox = new String[]{"Solved"};
        } else if ((newGames.isEmpty() && solvedGames.isEmpty() && !triedGames.isEmpty())) {
            this.comboBox = new String[]{"Tried"};
        } else {
            this.comboBox = new String[]{"No Sudokus found"};
        }

        newGames.add(0, "");
        solvedGames.add(0, "");
        triedGames.add(0, "");

        return this.comboBox;
    }

    /*
    *
    * Timer for the stopwatch
    *
     */
    private class StopWatch implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            hsec++;
            hsecCalculator++;

            if (hsec > 99) {
                hsec = 0;
                sec++;
            }
            if (sec > 59) {
                sec = 0;
                min++;
            }
            timeLabel.setText(((min < 10) ? "0" : "") + min + ":" + ((sec < 10) ? "0" : "") + sec + ":" + ((hsec < 10) ? "0" : "") + hsec);
        }
    }

    /*
    *
    * Getter and Setter for the cells  ||  DON'T KNOW IF I NEED THEM
    *
     */
    public void setTextField(JTextField[] cells) {
        this.cells = cells;
    }

    public JTextField[] getTextField() {
        return cells;
    }

    /*
    *
    * helping method to make sure you can only press the StopButton when every cell has some Input
    * provides that the userdata won't abuse the Stopwatch...
     */
    private boolean everyCellHasText() {
        String cellsFilled = "";
        for (JTextField cell : cells) {
            cellsFilled += cell.getText();
        }
        return cellsFilled.length() == 16;
    }

    /*
    *
    * MouseListener for the playButton
    *
     */
    private class PlayButtonEnabler extends MouseAdapter {

        @Override
        public void mouseEntered(MouseEvent e) {
            for (int i = 0; i < cells.length; i++) {
                if (cells[i].isEditable() == true && everyCellHasText() == true && cells[i].getText().length() == 1) {
                    playButton.setEnabled(true);
                }
            }
        }
    }

    //set properties for the following comboboxItems
    public void checkComboBoxInput(ArrayList<String> newGames, ArrayList<String> solvedGames, ArrayList<String> triedGames) {
        if (!newGames.isEmpty()) {
            newGames.remove(0);
        }
        if (!solvedGames.isEmpty()) {
            solvedGames.remove(0);
        }
        if (!triedGames.isEmpty()) {
            triedGames.remove(0);
        }

        if ((!newGames.isEmpty() && !solvedGames.isEmpty() && !triedGames.isEmpty())) {
            if (selectedItem.equals("Solved")) {
                this.comboBox = new String[]{"Solved", "New", "Tried"};
            } else if (selectedItem.equals("Tried")) {
                this.comboBox = new String[]{"Tried", "New", "Solved"};
            } else {
                this.comboBox = new String[]{"New", "Solved", "Tried"};
            }
        } else if ((!newGames.isEmpty() && !solvedGames.isEmpty() && triedGames.isEmpty())) {
            if (selectedItem.equals("Solved")) {
                this.comboBox = new String[]{"Solved", "New"};
            } else {
                this.comboBox = new String[]{"New", "Solved"};
            }
        } else if ((!newGames.isEmpty() && solvedGames.isEmpty() && !triedGames.isEmpty())) {
            if (selectedItem.equals("Tried")) {
                this.comboBox = new String[]{"Tried", "New"};
            } else {
                this.comboBox = new String[]{"New", "Tried"};
            }
        } else if ((newGames.isEmpty() && !solvedGames.isEmpty() && !triedGames.isEmpty())) {
            if (selectedItem.equals("Solved")) {
                this.comboBox = new String[]{"Solved", "Tried"};
            } else if (selectedItem.equals("Tried")) {
                this.comboBox = new String[]{"Tried", "Solved"};
            } else {
                this.comboBox = new String[]{"Solved", "Tried"};
            }
        } else if ((!newGames.isEmpty() && solvedGames.isEmpty() && triedGames.isEmpty())) {
            this.comboBox = new String[]{"New"};
        } else if ((newGames.isEmpty() && !solvedGames.isEmpty() && triedGames.isEmpty())) {
            this.comboBox = new String[]{"Solved"};
        } else if ((newGames.isEmpty() && solvedGames.isEmpty() && !triedGames.isEmpty())) {
            this.comboBox = new String[]{"Tried"};
        } else {
            this.comboBox = new String[]{"No Sudokus found"};
        }

        newGames.add(0, "");
        solvedGames.add(0, "");
        triedGames.add(0, "");
    }

    public String getSudokusAsString(ArrayList<String> newSudokus) {
        String SudokusAsString = "";
        for (int i = 1; i < newSudokus.size(); i++) {
            SudokusAsString += newSudokus.get(i) + ", ";
            if (i % 5 == 0) {
                SudokusAsString += "\n";
            }
        }

        return SudokusAsString.substring(0, SudokusAsString.length() - 2);
    }

    public String[] getCheckComboBoxInput() {
        return this.comboBox;
    }

    public void setUserdata(UserData userdata) {
        this.userdata = userdata;
    }

    public UserData getUserdata() {
        return userdata;
    }
}
